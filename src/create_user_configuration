#!/usr/bin/env bash

# this is a bash script that will generate a user_config.
# In an ideal world, i will have multiple user config that are well tested and that i will be selecting from.
# the style would be server ubuntu, base nix work, gaming arch >> link to the session of this hardware.
# but i would still need to be able to create a config and this scrit is here for that

printf ">>> Creating %s config...\n" "${USER}"

# so i have a certain number of categories
#
# pkgm
#
# detect_system_package_manager() {
#
#     [ -x "/usr/bin/pacman" ]           && system_package_manager="PACMAN" && return
#     [ -x "/usr/bin/apt-get" ]          && system_package_manager="DPKG" && return
#
#     if [ -z "$system_package_manager" ]; then
#         print_error "No supported system package manager installed"
#         print_information "(supported: apt, pacman)"
#         exit 1
#     fi
# }
#
# detect will confirm that the choice are possible
#


lists_path=$HOME/base/list
config_file=${lists_path}/config.csv
user_path=$HOME/base/unix/user
output_file=${user_path}/user_configuration.csv


column_number=$(awk -F ',' 'NR==1 {print NF}' "$config_file")
# printf "\n${column_number}\n"


for (( iterator=1; iterator<=column_number; iterator++ )); do

    # AWK command to extract the value of the specified column from the corresponding column
    column_value=$(awk -F ',' -v column="$iterator" 'NR==1 {print $column}' "$config_file")
    # printf "\n${column_value}\n"

    # cat $config_file
    # prompt the specified column options
    awk -F ',' -v column="$iterator" 'NR!=1 && $column != "" {printf("%d: %s\n", NR-1, $column)}' "$config_file"

    # Prompt the user to enter option numbers separated by space
    read -p "Enter ${column_value} option numbers separated by space: " option_numbers
    # printf "\n${option_numbers}\n"

    # AWK command to extract and print the corresponding options value to a file
    awk -F ',' -v option_numbers="$option_numbers" -v column_number="$iterator" '
    BEGIN {
        n = split(option_numbers, selected_indices, " ")

        # printf "selected_indices: "
        # for (i=1; i<=n; i++) {
        #     printf selected_indices[i] ","
        #     printf "i value : %s\n", i
        # }
        # printf "\n"
    }
    NR > 1 {
        for (i in selected_indices) {
            if (selected_indices[i] == (NR-1)) {
                printf "%s\n", $column_number
            }
        }
    }
    ' "$config_file" > ${iterator}.csv

     all_files+=" ${iterator}.csv"

    # cat ${iterator}.csv

done


rm -rf ${output_file}

paste -d ',' ${all_files} > ${output_file}

printf "\n-------------\n\n"
cat ${output_file}

rm -rf ${all_files}
